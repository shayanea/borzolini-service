/**
 * Example Usage of Generated JWT Tokens
 * 
 * This file demonstrates how to use the access and refresh tokens
 * generated by the generate-tokens.ts script.
 */

interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

class ApiClient {
  private baseUrl: string;
  private accessToken: string;
  private refreshToken: string;

  constructor(baseUrl: string, accessToken: string, refreshToken: string) {
    this.baseUrl = baseUrl;
    this.accessToken = accessToken;
    this.refreshToken = refreshToken;
  }

  /**
   * Make an authenticated API request
   */
  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const headers: HeadersInit = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.accessToken}`,
      ...options.headers,
    };

    try {
      const response = await fetch(url, {
        ...options,
        headers,
      });

      if (response.status === 401) {
        // Token expired, try to refresh
        const refreshed = await this.refreshAccessToken();
        if (refreshed) {
          // Retry the request with new token
          headers.Authorization = `Bearer ${this.accessToken}`;
          const retryResponse = await fetch(url, {
            ...options,
            headers,
          });
          return await retryResponse.json();
        }
      }

      return await response.json();
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  /**
   * Refresh the access token using the refresh token
   */
  private async refreshAccessToken(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          refreshToken: this.refreshToken,
        }),
      });

      if (response.ok) {
        const data = await response.json();
        this.accessToken = data.accessToken;
        this.refreshToken = data.refreshToken;
        return true;
      }
    } catch (error) {
      console.error('Failed to refresh token:', error);
    }
    return false;
  }

  /**
   * Get user profile
   */
  async getUserProfile(): Promise<ApiResponse> {
    return this.request('/api/users/profile');
  }

  /**
   * Get user preferences
   */
  async getUserPreferences(): Promise<ApiResponse> {
    return this.request('/api/users/preferences');
  }

  /**
   * Update user profile
   */
  async updateUserProfile(profileData: any): Promise<ApiResponse> {
    return this.request('/api/users/profile', {
      method: 'PUT',
      body: JSON.stringify(profileData),
    });
  }

  /**
   * Get appointments
   */
  async getAppointments(): Promise<ApiResponse> {
    return this.request('/api/appointments');
  }

  /**
   * Create appointment
   */
  async createAppointment(appointmentData: any): Promise<ApiResponse> {
    return this.request('/api/appointments', {
      method: 'POST',
      body: JSON.stringify(appointmentData),
    });
  }

  /**
   * Get clinics
   */
  async getClinics(): Promise<ApiResponse> {
    return this.request('/api/clinics');
  }

  /**
   * Get AI health insights
   */
  async getAIHealthInsights(): Promise<ApiResponse> {
    return this.request('/api/ai-health/insights');
  }
}

// Example usage
async function exampleUsage() {
  // Replace these with your actual tokens from the generate-tokens script
  const ACCESS_TOKEN = 'your_access_token_here';
  const REFRESH_TOKEN = 'your_refresh_token_here';
  const BASE_URL = 'http://localhost:3001';

  const apiClient = new ApiClient(BASE_URL, ACCESS_TOKEN, REFRESH_TOKEN);

  try {
    console.log('üîç Getting user profile...');
    const profile = await apiClient.getUserProfile();
    console.log('Profile:', profile);

    console.log('\nüìÖ Getting appointments...');
    const appointments = await apiClient.getAppointments();
    console.log('Appointments:', appointments);

    console.log('\nüè• Getting clinics...');
    const clinics = await apiClient.getClinics();
    console.log('Clinics:', clinics);

    console.log('\nü§ñ Getting AI health insights...');
    const insights = await apiClient.getAIHealthInsights();
    console.log('AI Insights:', insights);

  } catch (error) {
    console.error('Error:', error);
  }
}

// Example with cURL commands
function showCurlExamples() {
  console.log('üìù cURL Examples:');
  console.log('‚îÄ'.repeat(50));
  
  console.log('\n1. Get user profile:');
  console.log('curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \\');
  console.log('     http://localhost:3001/api/users/profile');
  
  console.log('\n2. Get appointments:');
  console.log('curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \\');
  console.log('     http://localhost:3001/api/appointments');
  
  console.log('\n3. Get clinics:');
  console.log('curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" \\');
  console.log('     http://localhost:3001/api/clinics');
  
  console.log('\n4. Refresh token:');
  console.log('curl -X POST http://localhost:3001/api/auth/refresh \\');
  console.log('     -H "Content-Type: application/json" \\');
  console.log('     -d \'{"refreshToken": "YOUR_REFRESH_TOKEN"}\'');
}

// Example with environment variables
function showEnvironmentSetup() {
  console.log('\nüîß Environment Setup:');
  console.log('‚îÄ'.repeat(50));
  
  console.log('\nAdd to your .env file or export:');
  console.log('export ACCESS_TOKEN="your_access_token_here"');
  console.log('export REFRESH_TOKEN="your_refresh_token_here"');
  console.log('export API_BASE_URL="http://localhost:3001"');
  
  console.log('\nOr create a .env file:');
  console.log('ACCESS_TOKEN=your_access_token_here');
  console.log('REFRESH_TOKEN=your_refresh_token_here');
  console.log('API_BASE_URL=http://localhost:3001');
}

// Run examples if this file is executed directly
if (require.main === module) {
  console.log('üöÄ JWT Token Usage Examples');
  console.log('='.repeat(50));
  
  showCurlExamples();
  showEnvironmentSetup();
  
  console.log('\nüí° To test with real tokens:');
  console.log('1. Run: npm run generate-tokens generate admin@borzolini.com Password123!');
  console.log('2. Copy the generated tokens');
  console.log('3. Replace the placeholder tokens in this file');
  console.log('4. Run: ts-node scripts/example-usage.ts');
}

export { ApiClient, exampleUsage };
